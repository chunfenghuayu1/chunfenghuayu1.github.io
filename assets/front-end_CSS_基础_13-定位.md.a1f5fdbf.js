import{_ as t,o as a,c as e,V as l}from"./chunks/framework.7cbf217e.js";const o="/assets/image-20230414190952891.47ce502d.png",q=JSON.parse('{"title":"定位","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/CSS/基础/13-定位.md","filePath":"front-end/CSS/基础/13-定位.md","lastUpdated":1683117492000}'),r={name:"front-end/CSS/基础/13-定位.md"},i=l('<h1 id="定位" tabindex="-1">定位 <a class="header-anchor" href="#定位" aria-label="Permalink to &quot;定位&quot;">​</a></h1><p>某个元素可以自由在一个盒子内移动位置，并且压住屏幕某个位置</p><p>定位:将盒子定在某一个位置 ,所以定位也是在摆放盒子,按照定位的方式移动盒子。</p><p>定位=定位模式+边偏移。</p><p>定位模式用于指定一个元素在文档中的定位方式。 边偏移则决定了该元素的最终位置。</p><h2 id="定位组成" tabindex="-1">定位组成 <a class="header-anchor" href="#定位组成" aria-label="Permalink to &quot;定位组成&quot;">​</a></h2><h3 id="定位模式" tabindex="-1">定位模式 <a class="header-anchor" href="#定位模式" aria-label="Permalink to &quot;定位模式&quot;">​</a></h3><p>决定元素的定位方式,它通过CSS的position属性来设置,其值可以分为四个:</p><table><thead><tr><th>值</th><th>语义</th></tr></thead><tbody><tr><td>static</td><td>静态定位</td></tr><tr><td>relative</td><td>相对定位</td></tr><tr><td>Absolute</td><td>绝对定位</td></tr><tr><td>fixed</td><td>固定定位</td></tr></tbody></table><h3 id="边偏移" tabindex="-1">边偏移 <a class="header-anchor" href="#边偏移" aria-label="Permalink to &quot;边偏移&quot;">​</a></h3><table><thead><tr><th>边偏移属性</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>top: 80px</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离.</td></tr><tr><td>bottom</td><td>bottom: 80px</td><td>底部偏移量，定义元素相对于其父元素下边线的距离。</td></tr><tr><td>left</td><td>left: 80px</td><td>左侧偏移量，定义元素相对于其父元素左边线的距离。</td></tr><tr><td>right</td><td>right: 80px</td><td>右侧偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><h2 id="定位方式" tabindex="-1">定位方式 <a class="header-anchor" href="#定位方式" aria-label="Permalink to &quot;定位方式&quot;">​</a></h2><h3 id="静态定位" tabindex="-1">静态定位 <a class="header-anchor" href="#静态定位" aria-label="Permalink to &quot;静态定位&quot;">​</a></h3><p>静态定位是元素的<strong>默认定位方式</strong>，无定位的意思</p><ul><li>静态定位按照标准流特性摆放位置,它没有边偏移</li><li>静态定位在布局时很少用到</li></ul><h3 id="相对定位" tabindex="-1">相对定位 <a class="header-anchor" href="#相对定位" aria-label="Permalink to &quot;相对定位&quot;">​</a></h3><p>相对定位是元素在移动位置的时候,是相对于它<strong>原来的位置</strong>来说的(自恋型)</p><p><strong>相对定位的特点:</strong> (务必记住)</p><ol><li>它是相对于自己原来的位置来移动的(<strong>移动位置的时候参照点是自己原来的位置</strong>)</li><li>原来在标准流的位置继续占有,后面的盒子仍然以标准流的方式对待它。(<strong>不脱标,继续保留原来位置</strong>)</li></ol><p>因此,相对定位并没有脱标。它最典型的应用是给绝对定位当爹的</p><h3 id="绝对定位" tabindex="-1">绝对定位 <a class="header-anchor" href="#绝对定位" aria-label="Permalink to &quot;绝对定位&quot;">​</a></h3><p>绝对定位是元素在移动位置的时候,是相对于它<strong>祖先元素</strong>来说的(拼爹型)</p><ol><li>如果<strong>没有祖先元素</strong>或者<strong>祖先元素没有定位</strong>,则以浏览器为准定位( Document文档)</li><li>如果祖先元素有定位(相对、绝对、固定定位),则以最近一级的有定位祖先元素为参考点移动位置</li></ol><h3 id="固定定位" tabindex="-1">固定定位 <a class="header-anchor" href="#固定定位" aria-label="Permalink to &quot;固定定位&quot;">​</a></h3><p>固定定位是元素固定于浏览器可视区的位置。主要使用场景:可以在浏览器页面滚动时元素的位置不会改变</p><p><strong>固定定位的特点:</strong> (务必记住)</p><ol><li><p>以浏览器的可视窗口为参照点移动元素</p></li><li><p>和父元素没有任何关系不随滚动条滚动而滚动</p></li><li><p>固定定位不再占有原先的位置</p></li></ol><blockquote><p>固定定位也是脱标的，其实固定定位也可以看作是一种特殊的绝对定位</p></blockquote><h2 id="根据版心定位" tabindex="-1">根据版心定位 <a class="header-anchor" href="#根据版心定位" aria-label="Permalink to &quot;根据版心定位&quot;">​</a></h2><ol><li><p>让固定定位的盒子left: 50%.走到浏览器可视区(也可以看做版心)的一半位置</p></li><li><p>让固定定位的盒子margin-left:版心宽度的一半距离。多走版心宽度的一半位置</p><p>就可以让固定定位的盒子贴着版心右侧对齐了</p></li></ol><h2 id="粘性定位-sticky" tabindex="-1">粘性定位 sticky <a class="header-anchor" href="#粘性定位-sticky" aria-label="Permalink to &quot;粘性定位 sticky&quot;">​</a></h2><p>粘性定位可以被认为是相对定位和固定定位的混合。sticky粘性的</p><p><strong>粘性定位的特点:</strong></p><ol><li>以浏览器的可视窗口为参照点移动元索(固定定位特点)</li><li>粘性定位<strong>占有原先的位置</strong>(相对定位特点)</li><li>必须添加top、left、right、bottom其中一个才有效</li></ol><h2 id="定位总结" tabindex="-1">定位总结 <a class="header-anchor" href="#定位总结" aria-label="Permalink to &quot;定位总结&quot;">​</a></h2><p><img src="'+o+'" alt="image-20230414190952891"></p><h2 id="定位叠放次序-z-index" tabindex="-1">定位叠放次序 z-index <a class="header-anchor" href="#定位叠放次序-z-index" aria-label="Permalink to &quot;定位叠放次序 z-index&quot;">​</a></h2><p>在使用定位布局时,可能会出现盒子重叠的情况。此时,可以使用Z-index来控制盒子的前后次序(z轴)</p><p>语法:</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">选择器</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">z-index</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>数值可以是正整数、负整数或0,默认是auto ,数值越大,盒子越靠上</li><li>如果属性值相同,则按照书写顺序,后来居上</li><li>数字后面不能加单位</li><li>只有定位的盒子才有z-index属性</li></ul><h2 id="定位的拓展" tabindex="-1">定位的拓展 <a class="header-anchor" href="#定位的拓展" aria-label="Permalink to &quot;定位的拓展&quot;">​</a></h2><h3 id="定位特殊特性" tabindex="-1">定位特殊特性 <a class="header-anchor" href="#定位特殊特性" aria-label="Permalink to &quot;定位特殊特性&quot;">​</a></h3><p>绝对定位和固定定位也和浮动类似</p><ol><li>行内元素添加绝对或者固定定位,可以直接设置高度和宽度</li><li>块级元素添加绝对或者固定定位,如果不给宽度或者高度,默认大小是内容的大小</li></ol><h3 id="脱标的盒子不会触发外边距塌陷" tabindex="-1">脱标的盒子不会触发外边距塌陷 <a class="header-anchor" href="#脱标的盒子不会触发外边距塌陷" aria-label="Permalink to &quot;脱标的盒子不会触发外边距塌陷&quot;">​</a></h3><p>浮动元素、绝对定位(固定定位 )元素的都不会触发外边距合并的问题</p><h3 id="绝对定位-固定定位-会完全压住盒子" tabindex="-1">绝对定位(固定定位)会完全压住盒子 <a class="header-anchor" href="#绝对定位-固定定位-会完全压住盒子" aria-label="Permalink to &quot;绝对定位(固定定位)会完全压住盒子&quot;">​</a></h3><p>浮动元素不同,只会压住它下面标准流的盒子,但是不会压住下面标准流盒子里面的文字(图片)</p><p>但是绝对定位(固定定位)会压住下面标准流所有的内容</p>',50),s=[i];function n(d,h,p,c,u,b){return a(),e("div",null,s)}const g=t(r,[["render",n]]);export{q as __pageData,g as default};
