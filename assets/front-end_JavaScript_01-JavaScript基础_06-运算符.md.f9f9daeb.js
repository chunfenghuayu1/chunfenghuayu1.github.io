import{_ as t,o as e,c as a,V as n}from"./chunks/framework.7cbf217e.js";const r="/assets/image-20220412145107035.832c88f2.png",u=JSON.parse('{"title":"运算符","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/JavaScript/01-JavaScript基础/06-运算符.md","filePath":"front-end/JavaScript/01-JavaScript基础/06-运算符.md","lastUpdated":1683117492000}'),l={name:"front-end/JavaScript/01-JavaScript基础/06-运算符.md"},d=n('<h1 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h1><h2 id="运算符-1" tabindex="-1">运算符 <a class="header-anchor" href="#运算符-1" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><p>运算符（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号</p><h2 id="算数运算符" tabindex="-1">算数运算符 <a class="header-anchor" href="#算数运算符" aria-label="Permalink to &quot;算数运算符&quot;">​</a></h2><p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">描述</th><th style="text-align:center;">实例</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:center;">加</td><td style="text-align:center;">10 + 20 = 30</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">减</td><td style="text-align:center;">10 - 20 = -10</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">乘</td><td style="text-align:center;">10 * 20 = 200</td></tr><tr><td style="text-align:center;">/</td><td style="text-align:center;">除</td><td style="text-align:center;">10 / 20 = 0.5</td></tr><tr><td style="text-align:center;">%</td><td style="text-align:center;">取余数（取模）</td><td style="text-align:center;">返回除法的余数9 % 2 = 1</td></tr></tbody></table><h3 id="浮点数的精度问题" tabindex="-1">浮点数的精度问题 <a class="header-anchor" href="#浮点数的精度问题" aria-label="Permalink to &quot;浮点数的精度问题&quot;">​</a></h3><p>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。</p><p><img src="'+r+'" alt="image-20220412145107035"></p><p>所以：不要直接判断两个浮点数是否相等!</p><h3 id="表达式和返回值" tabindex="-1">表达式和返回值 <a class="header-anchor" href="#表达式和返回值" aria-label="Permalink to &quot;表达式和返回值&quot;">​</a></h3><p>表达式：：是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合</p><p><strong>表达式最终都会有一个结果，返回给我们，我们成为返回值</strong></p><h2 id="递增和递减运算符" tabindex="-1">递增和递减运算符 <a class="header-anchor" href="#递增和递减运算符" aria-label="Permalink to &quot;递增和递减运算符&quot;">​</a></h2><p>如果需要反复给数字变量添加或减去1，可以使用**递增（++）<strong>和</strong>递减（--）**运算符来完成。</p><p>在 JavaScript 中，递增（++）和递减（ -- ）既可以放在变量前面，也可以放在变量后面。</p><p>放在变量前面时， 我们可以称为前置递增（递减）运算符。</p><p>放在变量后面时，我们可以称为后置递增（递减）运算符。</p><p><strong>注意：递增和递减运算符必须和变量配合使用。</strong></p><h3 id="前置递增运算符" tabindex="-1">前置递增运算符 <a class="header-anchor" href="#前置递增运算符" aria-label="Permalink to &quot;前置递增运算符&quot;">​</a></h3><p><strong>++num</strong> 前置递增，就是自加1，类似于 num = num + 1，但是 ++num 写起来更简单</p><p>使用口诀：先自加，后返回值</p><h3 id="后置递增运算符" tabindex="-1">后置递增运算符 <a class="header-anchor" href="#后置递增运算符" aria-label="Permalink to &quot;后置递增运算符&quot;">​</a></h3><p><strong>num++</strong> 后置递增，就是自加1，类似于 num = num + 1 ，但是 num++ 写起来更简单。</p><p>使用口诀：先返回原值，后自加</p><h2 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h2><p>概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值 （true / false）作为比较运算的结果。</p><table><thead><tr><th style="text-align:center;">运算符名称</th><th style="text-align:center;">说明</th><th style="text-align:center;">案例</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">＜</td><td style="text-align:center;">小于号</td><td style="text-align:center;">1＜2</td><td style="text-align:center;">ture</td></tr><tr><td style="text-align:center;">＞</td><td style="text-align:center;">大于号</td><td style="text-align:center;">1＞2</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">＞=</td><td style="text-align:center;">大于等于号</td><td style="text-align:center;">2&gt;=2</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">＜=</td><td style="text-align:center;">小于等于号</td><td style="text-align:center;">3&lt;=2</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">==</td><td style="text-align:center;">判等号</td><td style="text-align:center;">37==37</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">！=</td><td style="text-align:center;">不等号</td><td style="text-align:center;">37!=37</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">= = = ！= =</td><td style="text-align:center;">全等 要求值和数据类型都一致</td><td style="text-align:center;">37===&#39;37&#39;</td><td style="text-align:center;">false</td></tr></tbody></table><h2 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h2><p>概念：逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断</p><table><thead><tr><th style="text-align:center;">逻辑运算符</th><th style="text-align:center;">说明</th><th style="text-align:center;">案例</th></tr></thead><tbody><tr><td style="text-align:center;">&amp;&amp;</td><td style="text-align:center;">与 and</td><td style="text-align:center;">true&amp;&amp;false</td></tr><tr><td style="text-align:center;">||</td><td style="text-align:center;">或 or</td><td style="text-align:center;">true||false</td></tr><tr><td style="text-align:center;">！</td><td style="text-align:center;">非 not</td><td style="text-align:center;">！true</td></tr></tbody></table><h3 id="短路运算-逻辑中断" tabindex="-1">短路运算（逻辑中断） <a class="header-anchor" href="#短路运算-逻辑中断" aria-label="Permalink to &quot;短路运算（逻辑中断）&quot;">​</a></h3><p><strong>短路运算的原理</strong>：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值</p><p>1、逻辑与</p><p>语法： 表达式1 &amp;&amp; 表达式2</p><p>如果第一个表达式的值为真，则返回表达式2</p><p>如果第一个表达式的值为假，则返回表达式1</p><p><strong>多个表达式，如果第一个表达式判断为真，则返回最后一个表达式</strong></p><p><strong>如果有空字符串或者否定的为假 其余为真 0 ‘’ null undefined NaN</strong></p><p>2、逻辑或</p><p>语法： 表达式1 || 表达式2</p><p>如果第一个表达式的值为真，则返回表达式1</p><p>如果第一个表达式的值为假，则返回表达式2</p><h2 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h2><p>概念：用来把数据赋值给变量的运算符。</p><table><thead><tr><th style="text-align:center;">赋值运算符</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">=</td><td style="text-align:center;">直接赋值</td></tr><tr><td style="text-align:center;">+=、-=</td><td style="text-align:center;">加、减一个数后在赋值</td></tr><tr><td style="text-align:center;">*=、/=、%=</td><td style="text-align:center;">乘、除、取模后再赋值</td></tr></tbody></table><h2 id="运算符优先级" tabindex="-1">运算符优先级 <a class="header-anchor" href="#运算符优先级" aria-label="Permalink to &quot;运算符优先级&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">优先级</th><th style="text-align:center;">运算符</th><th style="text-align:center;">顺序</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">小括号</td><td style="text-align:center;">（）</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">一元运算符</td><td style="text-align:center;">++ -- ！</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">算数运算符</td><td style="text-align:center;">先* / 后 + -</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">关系运算符</td><td style="text-align:center;">＞ ＞= ＜ ＜=</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">相等运算符</td><td style="text-align:center;">== 、！= 、= = = 、！= =</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">逻辑运算符</td><td style="text-align:center;">先&amp;&amp;后||</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">赋值运算符</td><td style="text-align:center;">=</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">逗号运算符</td><td style="text-align:center;">，</td></tr></tbody></table>',48),i=[d];function s(c,g,x,h,o,y){return e(),a("div",null,i)}const b=t(l,[["render",s]]);export{u as __pageData,b as default};
