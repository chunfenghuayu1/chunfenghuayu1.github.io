import{_ as a,o as t,c as l,V as e}from"./chunks/framework.7cbf217e.js";const m=JSON.parse('{"title":"2D转换","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/CSS/HTML5新特性/11-2D转换.md","filePath":"front-end/CSS/HTML5新特性/11-2D转换.md","lastUpdated":1683117492000}'),r={name:"front-end/CSS/HTML5新特性/11-2D转换.md"},i=e('<h1 id="_2d转换" tabindex="-1">2D转换 <a class="header-anchor" href="#_2d转换" aria-label="Permalink to &quot;2D转换&quot;">​</a></h1><p>转换( transform )是CSS3中具有颠爱性的特征之一, 可以实现元素的位移、旋转、缩放等效果</p><p>转换( transform )你可以简单理解为变形</p><ul><li>移动: translate</li><li>旋转: rotate</li><li>缩放: scale</li></ul><h2 id="平面转换" tabindex="-1">平面转换 <a class="header-anchor" href="#平面转换" aria-label="Permalink to &quot;平面转换&quot;">​</a></h2><p>改变盒子在平面内的状态（位移、旋转、缩放）</p><p>2D转换</p><p>transform相对于盒子自身尺寸</p><p>translate（）只给一个值，表示x轴方向移动距离</p><p>复合写时位移放在前面</p><h2 id="移动-translate" tabindex="-1">移动 translate <a class="header-anchor" href="#移动-translate" aria-label="Permalink to &quot;移动 translate&quot;">​</a></h2><ol><li>语法</li></ol><p>transform: translate(x,y); 或者分开写</p><p>transform: translatex(n) ;</p><p>transform: translateY(n) ;</p><ol start="2"><li>重点</li></ol><ul><li>定义2D转换中的移动.沿着X和Y轴移动元素</li><li>translate最大的优点:不会影响到其他元素的位置</li><li>translate中的百分比单位是相对于自身元素的translate:(50%,50%);</li><li>对行内标签没有效果</li></ul><h2 id="旋转-rotate" tabindex="-1">旋转 rotate <a class="header-anchor" href="#旋转-rotate" aria-label="Permalink to &quot;旋转 rotate&quot;">​</a></h2><p>2D旋转指的是让元素在2维平面内顺势针旋转或者逆时针旋转。</p><p>transform：rotate(度数)</p><ol start="2"><li>重点</li></ol><ul><li>rotate里面跟度数，单位是deg比如rotate(45deg)</li><li>角度为正时,顺时针,负时,为逆时针</li><li>默认旋转的中心点是元素的中心点</li></ul><h2 id="旋转中心点" tabindex="-1">旋转中心点 <a class="header-anchor" href="#旋转中心点" aria-label="Permalink to &quot;旋转中心点&quot;">​</a></h2><p>transform-origin：x y ；</p><p>可以写方位名词 left right top bottom</p><h2 id="缩放-scale" tabindex="-1">缩放 scale <a class="header-anchor" href="#缩放-scale" aria-label="Permalink to &quot;缩放 scale&quot;">​</a></h2><p>transform：scale（x，y）</p><p>不可以是负数</p><p>x，y表示倍数</p><p>transform：scale（a）</p><p>等比例缩放，同时修改宽高</p><p>不影响其他盒子</p><p>可以设置缩放中心</p><h2 id="综合写法" tabindex="-1">综合写法 <a class="header-anchor" href="#综合写法" aria-label="Permalink to &quot;综合写法&quot;">​</a></h2><p>注意:</p><ol><li><p>同时使用多个转换,其格式为: transform: translate() rotate() scale()..等,</p></li><li><p>其顺序会影转换的效果。(先旋转会改变坐标轴方向)</p></li><li><p>当我们同时有位移和其他属性的时候,记得要将位移放到最前</p></li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>转换transform 我们简单理解就是变形有2D和3D之分</li><li>我们暂且学了三个 分别是位移旋转和缩放</li><li>2D 移动translate(x,y)最大的优势是不影响其他盒子 ，里面参数用% ,是相对于自身宽度和高度来计算的可以分开写比如translateX(x)和translateY(y)</li><li>2D旋转rotate(度数) 可以实现旋转元素度数的单位是deg</li><li>2D缩放sacle(x,y) 里面参数是数字不跟单位可以是小数最大的优势不影响其他盒子</li><li>设置转换中心点 transform-origin:xy;参数可以百分比、 像素或者是方位名词</li><li>当我们进行综合写法 ,同时有位移和其他属性的时候,记得要将位移放到最前</li></ul>',38),o=[i];function n(s,p,d,h,c,f){return t(),l("div",null,o)}const u=a(r,[["render",n]]);export{m as __pageData,u as default};
