import{_ as s,o as a,c as n,V as l}from"./chunks/framework.7cbf217e.js";const A=JSON.parse('{"title":"jQuery元素操作","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/jQuery/08-jQuery元素操作.md","filePath":"front-end/jQuery/08-jQuery元素操作.md","lastUpdated":1683117492000}'),o={name:"front-end/jQuery/08-jQuery元素操作.md"},p=l(`<h1 id="jquery元素操作" tabindex="-1">jQuery元素操作 <a class="header-anchor" href="#jquery元素操作" aria-label="Permalink to &quot;jQuery元素操作&quot;">​</a></h1><h2 id="遍历元素" tabindex="-1">遍历元素 <a class="header-anchor" href="#遍历元素" aria-label="Permalink to &quot;遍历元素&quot;">​</a></h2><p>jQuery隐式迭代是对同一类元素做了同样的操作。如果想要给同一类元素做不同操作，就需要用到遍历</p><p><strong>语法1：</strong></p><blockquote><p>$(&#39;div&#39;).each(function(index,domEle) {xxx;})</p></blockquote><p>1.each()方法遍历匹配的每一个元素。主要用DOM处理.each是每一个的意思</p><p>2.里面的回调函数有2个参数:index是每一个元素的索引号,domEle是==每一个DOM元素对象,不是jQuery对象==</p><p>3.所以要想使用jQuery方法,需要给这个dom元素转换为jQuery对象$(domEle)</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//第一个参数index可以自己指定字符,第二个参数是dom元素对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">$</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">each</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">domEle</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">$</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">domEle</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">//需要转换成jQuery对象</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//遍历元素,更改颜色</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#82AAFF;">$</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">green</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">blue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">$</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">each</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">domEle</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">$</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">domEle</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">css</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">color</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p><strong>语法2</strong></p><blockquote><p>$.each(object,function(index,element) {xxx;})</p></blockquote><p>1.$.each()方法可用于遍历任何对象.主要用于数据处理,比如数组,对象</p><p>2.里面的函数有两个参数:index是每个元素的索引号;element遍历内容</p><h2 id="创建元素" tabindex="-1">创建元素 <a class="header-anchor" href="#创建元素" aria-label="Permalink to &quot;创建元素&quot;">​</a></h2><blockquote><p>$(&#39;&lt;li&gt;&lt;/li&gt;&#39;)</p></blockquote><h2 id="添加元素" tabindex="-1">添加元素 <a class="header-anchor" href="#添加元素" aria-label="Permalink to &quot;添加元素&quot;">​</a></h2><blockquote><p>内部添加</p><p>//同一个元素只能添加一次,后面的添加会覆盖前面添加</p><p>element.append(&#39;内容&#39;) //放在匹配元素的最后面,类似于appendChild</p><p>element.prepend(&#39;内容&#39;) //放在匹配元素的最前面</p></blockquote><blockquote><p>外部添加</p><p>//同一个元素只能添加一次,后面的添加会覆盖前面添加</p><p>element.after(&#39;内容&#39;) //放在目标元素的后面</p><p>element.before(&#39;内容&#39;) //放在目标元素的前面</p></blockquote><h2 id="删除元素" tabindex="-1">删除元素 <a class="header-anchor" href="#删除元素" aria-label="Permalink to &quot;删除元素&quot;">​</a></h2><blockquote><p>element.remove() //删除匹配的元素本身</p><p>element.empty() //删除匹配的元素集合中所有的子节点</p><p>element.html(&#39;&#39;) //清空匹配元素的内容</p></blockquote>`,21),e=[p];function t(c,r,y,F,D,i){return a(),n("div",null,e)}const C=s(o,[["render",t]]);export{A as __pageData,C as default};
