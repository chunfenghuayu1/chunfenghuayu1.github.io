import{_ as s,o as a,c as n,V as l}from"./chunks/framework.7cbf217e.js";const p="/assets/image-20220412162238873-16497517948072.6506cbba.png",e="/assets/image-20220412162302543-16497517911061-16498573639875.82115fc9.png",t="/assets/image-20220412162532195.ddcaf56f.png",o="/assets/image-20220412162712218.7584b2cc.png",c="/assets/image-20220412170845002-16498573414111.6ba77d3f.png",u=JSON.parse('{"title":"流程控制","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/JavaScript/01-JavaScript基础/07-流程控制.md","filePath":"front-end/JavaScript/01-JavaScript基础/07-流程控制.md","lastUpdated":1683117492000}'),r={name:"front-end/JavaScript/01-JavaScript基础/07-流程控制.md"},i=l('<h1 id="流程控制" tabindex="-1">流程控制 <a class="header-anchor" href="#流程控制" aria-label="Permalink to &quot;流程控制&quot;">​</a></h1><h2 id="流程控制-1" tabindex="-1">流程控制 <a class="header-anchor" href="#流程控制-1" aria-label="Permalink to &quot;流程控制&quot;">​</a></h2><p>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码 的执行顺序来实现我们要完成的功能。</p><p>简单理解： 流程控制就是来控制我们的代码按照什么结构顺序来执行</p><p>流程控制主要有三种结构，分别是<strong>顺序结构</strong>、<strong>分支结构</strong>和<strong>循环结构</strong>，这三种结构代表三种代码执行的顺序。</p><h2 id="顺序流程控制" tabindex="-1">顺序流程控制 <a class="header-anchor" href="#顺序流程控制" aria-label="Permalink to &quot;顺序流程控制&quot;">​</a></h2><p>顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的<strong>先后顺序，依次执行</strong>， 程序中大多数的代码都是这样执行的</p><p><img src="'+p+'" alt="image-20220412162238873-16497517948072"></p><h2 id="分支流程控制if语句" tabindex="-1">分支流程控制if语句 <a class="header-anchor" href="#分支流程控制if语句" aria-label="Permalink to &quot;分支流程控制if语句&quot;">​</a></h2><p>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果</p><p><img src="'+e+`" alt="image-20220412162302543"></p><h3 id="if语句" tabindex="-1">if语句 <a class="header-anchor" href="#if语句" aria-label="Permalink to &quot;if语句&quot;">​</a></h3><p>1、语法结构</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 条件成立执行代码，否则什么也不做</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (条件表达式) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 条件成立执行的代码语句</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>2、执行流程</p><p><img src="`+t+`" alt="image-20220412162532195"></p><h3 id="if-else语句-双分支语句" tabindex="-1">if else语句（双分支语句） <a class="header-anchor" href="#if-else语句-双分支语句" aria-label="Permalink to &quot;if else语句（双分支语句）&quot;">​</a></h3><p>1、语法结构</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 条件成立 执行 if 里面代码，否则执行else 里面的代码</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (条件表达式) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// [如果] 条件成立执行的代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// [否则] 执行的代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>2、执行流程</p><p><img src="`+o+`" alt="image-20220412162712218"></p><h3 id="if-else-if-语句-多分支语句" tabindex="-1">if else if 语句(多分支语句) <a class="header-anchor" href="#if-else-if-语句-多分支语句" aria-label="Permalink to &quot;if else if 语句(多分支语句)&quot;">​</a></h3><p>1、语法结构</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 适合于检查多重条件。</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (条件表达式1) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">语句1</span><span style="color:#F07178;">；</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (条件表达式2) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">语句2</span><span style="color:#F07178;">；</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (条件表达式3) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">语句3</span><span style="color:#F07178;">；</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">....</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 上述条件都不成立执行此处代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>2、执行流程</p><p><img src="`+c+`" alt="image-20220412170845002"></p><h2 id="三元表达式" tabindex="-1">三元表达式 <a class="header-anchor" href="#三元表达式" aria-label="Permalink to &quot;三元表达式&quot;">​</a></h2><p>三元表达式也能做一些简单的条件选择。 由三元运算符组成的式子称为三元表达式</p><p>1、语法结构</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">表达式1 </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> 表达式2 </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 表达式3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prompt</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  num </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(result)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>2、执行思路</p><p>如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值</p><p>简单理解： 就类似于 if else （双分支） 的简写</p><h2 id="分支流程控制switch语句" tabindex="-1">分支流程控制switch语句 <a class="header-anchor" href="#分支流程控制switch语句" aria-label="Permalink to &quot;分支流程控制switch语句&quot;">​</a></h2><p>switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。</p><p>当要针对变量设置一系列的特定值的选项时，就可以使用 switch。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;">( 表达式 )</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> value1</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 表达式 等于 value1 时要执行的代码</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> value2</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 表达式 等于 value2 时要执行的代码</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 表达式 不等于任何一个 value 时要执行的代码</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>switch ：开关转换，case：小例子 选项</p><p>关键字 switch 后面<strong>括号内</strong>可以是<strong>表达式</strong>或<strong>值</strong>， 通常是一个<strong>变量</strong></p><p>关键字 <strong>case</strong> , 后跟一个选项的表达式或值，<strong>后面跟一个冒号</strong></p><p>switch 表达式的值会与结构中的 case 的值做比较</p><p>如果存在匹配<strong>全等</strong>(===) ，则与该 case 关联的代码块会被执行，并在遇到 <strong>break 时停止</strong>，整个 switch 语句代码执行结束</p><p>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</p><blockquote><p><strong>注意： 执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句。</strong></p></blockquote><h3 id="switch语句和if-else-if-语句的区别" tabindex="-1">switch语句和if else if 语句的区别 <a class="header-anchor" href="#switch语句和if-else-if-语句的区别" aria-label="Permalink to &quot;switch语句和if else if 语句的区别&quot;">​</a></h3><p>① 一般情况下，它们两个语句可以相互替换</p><p>② switch...case语句通常处理case为比较确定值的情况，而 if…else…语句更加灵活，常用于范围判断(大于、 等于某个范围)</p><p>③ switch语句进行条件判断后直接执行到程序的条件语句，效率更高。而if…else 语句有几种条件，就得判断多少次。</p><p>④ 当分支比较少时，if…else语句的执行效率比switch语句高。</p><p>⑤ 当分支比较多时，switch语句的执行效率比较高，而且结构更清晰。</p>`,50),D=[i];function y(F,C,f,h,A,d){return a(),n("div",null,D)}const m=s(r,[["render",y]]);export{u as __pageData,m as default};
