import{_ as a,o as t,c as o,V as e}from"./chunks/framework.7cbf217e.js";const r="/assets/image-20220519010302643.1a3639cf.png",i="/assets/image-20220519011856859.07983d4e.png",n="/assets/image-20220519013043403.53bbb020.png",u=JSON.parse('{"title":"EventLoop","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/JavaScript/07-ES6~ES11/ES6模块化/04-EventLoop.md","filePath":"front-end/JavaScript/07-ES6~ES11/ES6模块化/04-EventLoop.md","lastUpdated":1683117492000}'),l={name:"front-end/JavaScript/07-ES6~ES11/ES6模块化/04-EventLoop.md"},s=e('<h1 id="eventloop" tabindex="-1">EventLoop <a class="header-anchor" href="#eventloop" aria-label="Permalink to &quot;EventLoop&quot;">​</a></h1><h2 id="javascript是单线程的语言" tabindex="-1">JavaScript是单线程的语言 <a class="header-anchor" href="#javascript是单线程的语言" aria-label="Permalink to &quot;JavaScript是单线程的语言&quot;">​</a></h2><p>JavaScript 是一门单线程执行的编程语言。也就是说，同一时间只能做一件事情。</p><p><img src="'+r+'" alt="image-20220519010302643"></p><p>单线程执行任务队列的问题：</p><p>如果前一个任务非常耗时，则后续的任务就不得不一直等待，从而导致程序假死的问题。</p><h2 id="同步任务和异步任务" tabindex="-1">同步任务和异步任务⭐ <a class="header-anchor" href="#同步任务和异步任务" aria-label="Permalink to &quot;同步任务和异步任务:star:&quot;">​</a></h2><p>为防止某个<strong>耗时任务</strong>导致<strong>程序假死</strong>的问题，JavaScript把待执行的任务分为了两类：</p><ol><li>同步任务(synchronous) <ul><li>又叫做<strong>非耗时任务</strong>，指的是主线程上排队执行的那些任务</li><li>只有前一个任务执行完毕，才能执行后一个任务</li></ul></li><li>异步任务(asynchronous) <ul><li>又叫做<strong>耗时任务</strong>，异步任务由JavaScript<strong>委托给</strong>宿主环境进行执行</li><li>当异步任务执行完成后，会通知<strong>JavaScript主线程</strong>执行异步任务的<strong>回调函数</strong></li></ul></li></ol><h2 id="同步任务和异步任务的执行过程" tabindex="-1">同步任务和异步任务的执行过程 <a class="header-anchor" href="#同步任务和异步任务的执行过程" aria-label="Permalink to &quot;同步任务和异步任务的执行过程&quot;">​</a></h2><p><img src="'+i+'" alt="image-20220519011856859"></p><ol><li>同步任务由 JavaScript 主线程次序执行</li><li>异步任务委托给宿主环境执行</li><li>已完成的异步任务对应的回调函数，会被 加入到任务队列中等待执行</li><li>JavaScript 主线程的执行栈被清空后，会读取任务队列中的回调函数，次序执行</li><li>JavaScript 主线程不断重复上面的第 4 步</li></ol><h2 id="eventloop基本概念" tabindex="-1">EventLoop基本概念 <a class="header-anchor" href="#eventloop基本概念" aria-label="Permalink to &quot;EventLoop基本概念&quot;">​</a></h2><p><strong>JavaScript 主线程从“任务队列”中读取异步任务的回调函数，放到执行栈中依次执行</strong>。这个过程是循环不断的，所以整个的这种运行机制又称为EventLoop（事件循环）</p><h3 id="结合eventloop分析输出的顺序" tabindex="-1">结合EventLoop分析输出的顺序 <a class="header-anchor" href="#结合eventloop分析输出的顺序" aria-label="Permalink to &quot;结合EventLoop分析输出的顺序&quot;">​</a></h3><p><img src="'+n+'" alt="image-20220519013043403"></p><p>正确的输出结果：ADCB。其中：</p><ul><li>A 和 D 属于<strong>同步任务</strong>。会根据代码的先后顺序依次被执行</li><li>C 和 B 属于<strong>异步任务</strong>。它们的回调函数会被加入到任务队列中，等待主线程空闲时再执行</li></ul>',18),p=[s];function c(h,d,v,_,g,m){return t(),o("div",null,p)}const E=a(l,[["render",c]]);export{u as __pageData,E as default};
