import{_ as a,o as s,c as t,V as p}from"./chunks/framework.7cbf217e.js";const l="/assets/image-20220411220654228.c004cbc1.png",n="/assets/image-20220411225019700-16496886285621.51fd141e.png",h=JSON.parse('{"title":"JavaScript实现","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/JavaScript/01-JavaScript基础/02-JavaScript实现.md","filePath":"front-end/JavaScript/01-JavaScript基础/02-JavaScript实现.md","lastUpdated":1683117492000}'),o={name:"front-end/JavaScript/01-JavaScript基础/02-JavaScript实现.md"},e=p('<h1 id="javascript实现" tabindex="-1">JavaScript实现 <a class="header-anchor" href="#javascript实现" aria-label="Permalink to &quot;JavaScript实现&quot;">​</a></h1><p>完整的JavaScript实现包含以下几个部分：</p><ul><li>核心【ecmascript】</li><li>文档对象模型【DOM】</li><li>浏览器对象模型【BOM】</li></ul><p><img src="'+l+`" alt="image-20220411220654228"></p><h2 id="ecmascript" tabindex="-1">ECMAScript <a class="header-anchor" href="#ecmascript" aria-label="Permalink to &quot;ECMAScript&quot;">​</a></h2><p>ECMAScript 语法 类型 语句 关键字 保留字 操作符 全局对象</p><h2 id="ecmascript发展阶段" tabindex="-1">ECMAScript发展阶段 <a class="header-anchor" href="#ecmascript发展阶段" aria-label="Permalink to &quot;ECMAScript发展阶段&quot;">​</a></h2><ul><li><p>ES6</p><p>类、模块、迭代器、生成器、箭头函数、期约、反射、代理等</p></li><li><p>ES7</p><p>Array.prototype.includes和指数操作符</p></li><li><p>ES8</p><p>异步函数（async/wait）、SharedArrayBuffer及Atomics API，以及Object.values()/Object.entries()/Object.getOwnPropertyDescriptors()和字符串填充方法，另外明确支持对象字面量最后的逗号。</p></li><li><p>ES9</p><p>异步迭代、剩余和 扩展属性、一组新的正则表达式特性、Promise finally()，以及模板字面量修订</p></li><li><p>ES10</p><p>Array.prototype.flat()/flatMap()、String.prototype.trimStart()/trimEnd()、Object.fromEntries()方 法，以及 Symbol.prototype.description 属性，明确定义了 Function.prototype.toString() 的返回值并固定了 Array.prototype.sort()的顺序</p></li></ul><h2 id="dom-文档对象模型" tabindex="-1">DOM（文档对象模型） <a class="header-anchor" href="#dom-文档对象模型" aria-label="Permalink to &quot;DOM（文档对象模型）&quot;">​</a></h2><p><strong>文档对象模型（DOM）：提供与网页内容交互的方法和接口。</strong></p><p>文档对象模型（DOM，Document Object Model）是一个应用编程接口（API），用于在 HTML 中使 用扩展的 XML。DOM 将整个页面抽象为一组分层节点HTML 或 XML 页面的每个组成部分都是一种 节点，包含不同的数据。</p><p>比如下面的 HTML 页面：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Sample Page</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> Hello World!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><img src="`+n+'" alt="image-20220411225019700"></p><h2 id="bom-浏览器对象模型" tabindex="-1">BOM(浏览器对象模型) <a class="header-anchor" href="#bom-浏览器对象模型" aria-label="Permalink to &quot;BOM(浏览器对象模型)&quot;">​</a></h2><p><strong>浏览器对象模型（BOM）：提供与浏览器交互的方法和接口。</strong></p><p>浏览器对象模型(Browser Object Model)是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p>',17),r=[e];function c(i,D,y,d,F,A){return s(),t("div",null,r)}const C=a(o,[["render",c]]);export{h as __pageData,C as default};
