import{_ as s,o as a,c as n,V as l}from"./chunks/framework.7cbf217e.js";const p="/assets/image-20220417002726814.dd17e7ec.png",o="/assets/image-20220417002936560.04cbf82c.png",e="/assets/image-20220417003309308.d6a79e2b.png",h=JSON.parse('{"title":"简单类型与复杂类型","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/JavaScript/03-JavaScript对象与内置对象/06-简单类型与复杂类型.md","filePath":"front-end/JavaScript/03-JavaScript对象与内置对象/06-简单类型与复杂类型.md","lastUpdated":1683117492000}'),t={name:"front-end/JavaScript/03-JavaScript对象与内置对象/06-简单类型与复杂类型.md"},c=l('<h1 id="简单类型与复杂类型" tabindex="-1">简单类型与复杂类型 <a class="header-anchor" href="#简单类型与复杂类型" aria-label="Permalink to &quot;简单类型与复杂类型&quot;">​</a></h1><h2 id="简单类型与复杂类型-1" tabindex="-1">简单类型与复杂类型 <a class="header-anchor" href="#简单类型与复杂类型-1" aria-label="Permalink to &quot;简单类型与复杂类型&quot;">​</a></h2><p>简单类型又叫做基本数据类型或者<strong>值类型</strong>,复杂类型又叫做<strong>引用类型</strong></p><ul><li>值类型:简单数据类型/基本数据类型,在存储时变量中存储的是值本身,因此叫做值类型 <ul><li>string,number,boolean,undefined,null</li><li><strong>null</strong>:返回空对象.如果有个变量我们打算存储为对象,暂时没想好放什么,这个时候给null</li></ul></li><li>引用类型:复杂数据类型,在存储时变量中存储的仅仅是地址(引用),因此叫做引用数据类型 <ul><li>通过new关键字创建的对象(系统对象,自定义对象),如Object,Array,Date等</li></ul></li></ul><h2 id="堆和栈" tabindex="-1">堆和栈 <a class="header-anchor" href="#堆和栈" aria-label="Permalink to &quot;堆和栈&quot;">​</a></h2><p>1.栈(操作系统):由操作自动分配释放存放函数的参数值,局部变量的值等.其操作方式类似于数据结构中的栈;</p><p><strong>简单数据类型存放在栈里面</strong></p><p>2.堆(操作系统):存储复杂类型(对象),一般由程序员分配释放,若程序员不释放,则由垃圾回收机制回收</p><p><strong>复杂数据类型存放在堆里面</strong></p><p><img src="'+p+'" alt="image-20220417002726814"></p><p>注意:JavaScript中没有堆栈的概念,通过堆栈的方式,可以让大家更容易理解代码的一些执行方式,便于将来学习其他语言</p><h2 id="简单类型的内存分配" tabindex="-1">简单类型的内存分配 <a class="header-anchor" href="#简单类型的内存分配" aria-label="Permalink to &quot;简单类型的内存分配&quot;">​</a></h2><ul><li>值类型(简单数据类型):string,number,boolean,undefined,null</li><li>值类型变量的数据直接存放在变量(栈空间)中</li></ul><p><img src="'+o+`" alt="image-20220417002936560"></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 简单数据类型 null  返回的是一个空的对象  object </span></span>
<span class="line"><span style="color:#A6ACCD;">    var timer = null;</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(typeof timer);</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 如果有个变量我们以后打算存储为对象，暂时没想好放啥， 这个时候就给 null </span></span>
<span class="line"><span style="color:#A6ACCD;">    // 1. 简单数据类型 是存放在栈里面 里面直接开辟一个空间存放的是值</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 2. 复杂数据类型 首先在栈里面存放地址 十六进制表示  然后这个地址指向堆里面的数据</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="复杂类型的内存分配" tabindex="-1">复杂类型的内存分配 <a class="header-anchor" href="#复杂类型的内存分配" aria-label="Permalink to &quot;复杂类型的内存分配&quot;">​</a></h2><ul><li>引用类型(复杂数据类型):通过new关键字创建的对象(系统对象,自定义对象),如object,array,date等</li><li>引用类型变量(栈空间)里面存放的是地址,真正的对象实例存放在堆空间中</li></ul><p><img src="`+e+`" alt="image-20220417003309308"></p><h2 id="简单类型传参" tabindex="-1">简单类型传参 <a class="header-anchor" href="#简单类型传参" aria-label="Permalink to &quot;简单类型传参&quot;">​</a></h2><p>函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 简单数据类型传参</span></span>
<span class="line"><span style="color:#A6ACCD;">    function fn(a) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        a</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    var x = 10;</span></span>
<span class="line"><span style="color:#A6ACCD;">    fn(x);//11</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(x);//10</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="复杂类型传参" tabindex="-1">复杂类型传参 <a class="header-anchor" href="#复杂类型传参" aria-label="Permalink to &quot;复杂类型传参&quot;">​</a></h2><p>函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 复杂数据类型传参</span></span>
<span class="line"><span style="color:#A6ACCD;">    function Person(name) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> name;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    function f1(x) </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// x = p</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name); </span><span style="color:#676E95;font-style:italic;">// 2. 这个输出什么 ?  刘德华   </span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张学友</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name); </span><span style="color:#676E95;font-style:italic;">// 3. 这个输出什么 ?   张学友</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    var p = new Person(&quot;刘德华&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(p.name); // 1. 这个输出什么 ?   刘德华 </span></span>
<span class="line"><span style="color:#A6ACCD;">    f1(p);</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(p.name); // 4. 这个输出什么 ?   张学友</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>`,24),r=[c];function i(D,y,A,C,F,d){return a(),n("div",null,r)}const g=s(t,[["render",i]]);export{h as __pageData,g as default};
