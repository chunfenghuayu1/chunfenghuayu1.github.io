import{_ as s,o as a,c as n,V as l}from"./chunks/framework.7cbf217e.js";const p="/assets/image-20220427223414073.787e159c.png",o="/assets/image-20230415025018085.71f202a8.png",t="/assets/image-20220428152334075.0dc438dd.png",e="/assets/image-20220427225452260.7fcc51bd.png",c="/assets/image-20220428153413890.ef349f7b.png",r="/assets/image-20220428153756325.ddcd2b57.png",y="/assets/image-20220428160253187-16814972768371.5c556353.png",F="/assets/image-20220428161715813.1667e7cb.png",D="/assets/image-20220428162056152.ba0bda1d.png",i="/assets/image-20220428162946572.b9efa78e.png",v=JSON.parse('{"title":"构造函数和原型","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/JavaScript/06-JavaScript高级之面向对象/02-构造函数和原型.md","filePath":"front-end/JavaScript/06-JavaScript高级之面向对象/02-构造函数和原型.md","lastUpdated":1683117492000}'),A={name:"front-end/JavaScript/06-JavaScript高级之面向对象/02-构造函数和原型.md"},C=l('<h1 id="构造函数和原型" tabindex="-1">构造函数和原型 <a class="header-anchor" href="#构造函数和原型" aria-label="Permalink to &quot;构造函数和原型&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>在典型的OOP的语言中，都存在类的概念，类就是对象的模板，对象就是类的实例。</p><p>ES6，全称ECMAScript，2015.06发版，但目前浏览器的JavaScript是es5版本，大多数高版本的浏览器也也支持es6，不过实现了es6部分特性和功能。</p><p>在es6之前，对象不是基于类创建的，而是用一种称为构造函数的特殊函数来定义对象和他们的特征。</p><h2 id="静态成员和实例成员" tabindex="-1">静态成员和实例成员 <a class="header-anchor" href="#静态成员和实例成员" aria-label="Permalink to &quot;静态成员和实例成员&quot;">​</a></h2><h3 id="实例成员" tabindex="-1">实例成员 <a class="header-anchor" href="#实例成员" aria-label="Permalink to &quot;实例成员&quot;">​</a></h3><p>就是通过构造函数内部通过this添加的成员</p><p>只能通过实例化的对象来访问，不能通过构造函数来访问实例成员，比如对象的属性值</p><h3 id="静态成员" tabindex="-1">静态成员 <a class="header-anchor" href="#静态成员" aria-label="Permalink to &quot;静态成员&quot;">​</a></h3><p>静态成员只能通过构造函数来访问，比如对象的属性或者在对象上面直接赋值</p><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><h3 id="构造函数的特点" tabindex="-1">构造函数的特点 <a class="header-anchor" href="#构造函数的特点" aria-label="Permalink to &quot;构造函数的特点&quot;">​</a></h3><ol><li>构造函数有原型对象prototype</li><li>构造函数原型对象prototype里面有constructor指向构造函数本身</li><li>构造函数可以通过原型对象添加方法</li><li>构造函数创建的实例对象有__proto__原型,指向构造函数的原型对象</li></ol><h3 id="构造函数的问题" tabindex="-1">构造函数的问题 <a class="header-anchor" href="#构造函数的问题" aria-label="Permalink to &quot;构造函数的问题&quot;">​</a></h3><p><strong>存在浪费内存的问题</strong></p><p>使用构造函数进行存储对象的时候，每创建一个新对象，就会开辟一个内存空间存放同一个方法/函数</p><p><img src="'+p+'" alt="image-20220427223414073"></p><p><img src="'+o+`" alt="image-20230415025018085"></p><h3 id="构造函数原型prototype" tabindex="-1">构造函数原型prototype <a class="header-anchor" href="#构造函数原型prototype" aria-label="Permalink to &quot;构造函数原型prototype&quot;">​</a></h3><p>构造函数通过原型分配的函数是所有对象所<strong>共享的</strong></p><p>JavaScript规定，<strong>每一个构造函数都有一个prototype属性</strong>，指向另一个对象。注意这个prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。</p><p><strong>我们可以把那些不变的方法，直接定义在prototype对象上，这样所有对象的实例就可以共享这些方法。</strong></p><p><strong>对象可以调用原型方法</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Star</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">age</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//方法放到原型对象里面</span></span>
<span class="line"><span style="color:#FFCB6B;">Star</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sing</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> l </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Star</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">21312</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">l</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sing</span><span style="color:#A6ACCD;">()；</span></span></code></pre></div><p><img src="`+t+'" alt="image-20220428152334075"></p><h3 id="原型对象-proto" tabindex="-1">原型对象__proto__ <a class="header-anchor" href="#原型对象-proto" aria-label="Permalink to &quot;原型对象\\_\\_proto\\_\\_&quot;">​</a></h3><p>**对象都会有一个属性__proto__**指向构造函数的prototype原型对象，之所以我们对象可以使用构造函数prototype原型对象的属性和方法，就是因为对象有__proto__原型存在</p><ul><li>__proto__对象原型和原型对象prototype是等价的</li></ul><p><img src="'+e+'" alt="image-20220427225452260"></p><p><img src="'+c+'" alt="image-20220428153413890"></p><p><img src="'+r+`" alt="image-20220428153756325"></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Star</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">age</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">Star</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sing</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> l </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Star</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">21312</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        l</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">song</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        l</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sing</span><span style="color:#A6ACCD;">()；</span><span style="color:#676E95;font-style:italic;">//调用原型对象的方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        l</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">song</span><span style="color:#A6ACCD;">()；</span><span style="color:#676E95;font-style:italic;">//调用自己的方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Star</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//里面原型是对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(l)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//里面有自己的方法和原型对象的方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(l</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//里面原型是对象</span></span></code></pre></div><h3 id="constrctor构造函数" tabindex="-1">constrctor构造函数 <a class="header-anchor" href="#constrctor构造函数" aria-label="Permalink to &quot;constrctor构造函数&quot;">​</a></h3><p><strong>对象原型__proto__<strong>和</strong>构造函数(prototype)原型对象</strong>里面都有一个属性constructor属性,constructor我们称为构造函数,因为它指回构造函数本身.</p><p>constructor主要用于记录该对象引用于哪一个构造函数,它可以让原型对象重新指向原来的构造函数.</p><p>很多情况下,我们需要手动的利用constructor这个属性指回原来的构造函数</p><p><img src="`+y+'" alt="image-20220428160253187"></p><p>如果创建的原型是对象,那么需要constructor重新指回原型</p><p><img src="'+F+`" alt="image-20220428161715813"></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Star</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">age</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Star.prototype.sing = function() {</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//     console.log(&#39;a&#39;);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Star.prototype.movie = function() {</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//     console.log(&#39;b&#39;);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//覆盖掉原来的constructor的属性</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">Star</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">Star</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//指回构造函数!!!!!!!!!!!!!!!!!!!!!!!!!</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">sing</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">movie</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> l </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Star</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">21312</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> k </span><span style="color:#89DDFF;">=new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Star</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">wqe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">875</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Star</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//里面原型是对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(l</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//里面原型是对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Star</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//被覆盖</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(l</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//被覆盖</span></span></code></pre></div><h3 id="构造函数-实例-原型对象三者之间的关系" tabindex="-1">构造函数，实例，原型对象三者之间的关系 <a class="header-anchor" href="#构造函数-实例-原型对象三者之间的关系" aria-label="Permalink to &quot;构造函数，实例，原型对象三者之间的关系&quot;">​</a></h3><p><img src="`+D+'" alt="image-20220428162056152"></p><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><p>只要是对象就有__proto__原型，指向原型对象。</p><p>Starprototype对象里面的__proto__指向Object.prototype原型</p><p><img src="'+i+`" alt="image-20220428162946572"></p><h2 id="javascript的成员查找机制-规则" tabindex="-1">JavaScript的成员查找机制(规则) <a class="header-anchor" href="#javascript的成员查找机制-规则" aria-label="Permalink to &quot;JavaScript的成员查找机制(规则)&quot;">​</a></h2><ol><li>当访问一个对象的属性(包括方法)时,首先查找这个<strong>对象自身</strong>有没有属性</li><li>如果没有就查找它的原型(也就是__proto__)指向<strong>prototype原型对象</strong></li><li>如果还没有就查找原型对象的原型(Object的原型对象)</li><li>依此类推一直找到Object为止(<strong>null</strong>)</li><li>__proto__对象原型的意义就在于为对象成员查找机制提供一个方向,或者说一条路线.</li></ol><h2 id="原型对象中this指向" tabindex="-1">原型对象中this指向 <a class="header-anchor" href="#原型对象中this指向" aria-label="Permalink to &quot;原型对象中this指向&quot;">​</a></h2><ol><li>在构造函数中,里面this指向的是对象实例</li><li>在原型对象函数里面的this指向对象实例</li><li>需要调用才可以确定,一般指向函数的调用者</li></ol><h2 id="扩展内置对象" tabindex="-1">扩展内置对象 <a class="header-anchor" href="#扩展内置对象" aria-label="Permalink to &quot;扩展内置对象&quot;">​</a></h2><p>可以通过原型对象,对原来的内置对象进行扩展自定义方法.比如给数组增加自定义求偶数和的功能</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        Array.prototype.sum = function () </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            var sum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">for</span><span style="color:#A6ACCD;"> (var i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">; i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">length; i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                sum += this</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">];</span></span>
<span class="line"><span style="color:#F07178;">            }</span></span>
<span class="line"><span style="color:#F07178;">            return sum;</span></span>
<span class="line"><span style="color:#F07178;">        }</span></span>
<span class="line"><span style="color:#F07178;">        var arr = [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">        console.log(arr.sum());</span></span>
<span class="line"><span style="color:#F07178;">        console.log(Array.prototype);</span></span>
<span class="line"><span style="color:#F07178;">        var arr1 = new Array(11, 22, 33);</span></span>
<span class="line"><span style="color:#F07178;">        console.log(arr1.sum());</span></span>
<span class="line"><span style="color:#F07178;">    &lt;/script&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//不能这么用,会覆盖原来的方法   </span></span>
<span class="line"><span style="color:#F07178;">Array.prototype = {</span></span>
<span class="line"><span style="color:#F07178;">            sum</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">sum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sum</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span></code></pre></div>`,54),h=[C];function g(_,d,m,u,f,b){return a(),n("div",null,h)}const S=s(A,[["render",g]]);export{v as __pageData,S as default};
