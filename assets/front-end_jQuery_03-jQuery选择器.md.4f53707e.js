import{_ as t,o as e,c as l,V as r}from"./chunks/framework.7cbf217e.js";const a="/assets/image-20230415040048039.ecf68604.png",p=JSON.parse('{"title":"jQuery选择器","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/jQuery/03-jQuery选择器.md","filePath":"front-end/jQuery/03-jQuery选择器.md","lastUpdated":1683117492000}'),n={name:"front-end/jQuery/03-jQuery选择器.md"},d=r('<h1 id="jquery选择器" tabindex="-1">jQuery选择器 <a class="header-anchor" href="#jquery选择器" aria-label="Permalink to &quot;jQuery选择器&quot;">​</a></h1><h2 id="jquery基础选择器" tabindex="-1">jQuery基础选择器 <a class="header-anchor" href="#jquery基础选择器" aria-label="Permalink to &quot;jQuery基础选择器&quot;">​</a></h2><blockquote><p>$(&#39;选择器&#39;) //里面选择器直接写css选择器,但要加引号</p></blockquote><p><img src="'+a+'" alt="image-20230415040048039"></p><h2 id="jquery层级选择器" tabindex="-1">jQuery层级选择器 <a class="header-anchor" href="#jquery层级选择器" aria-label="Permalink to &quot;jQuery层级选择器&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">用法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">子代选择器</td><td style="text-align:center;">$(&#39;ul&gt;li&#39;)</td><td style="text-align:center;">使用&gt;号,获取亲儿子层级的元素;注意,并不会获取孙子层级的元素</td></tr><tr><td style="text-align:center;">后代选择器</td><td style="text-align:center;">$(&#39;ul li&#39;)</td><td style="text-align:center;">使用空格,代表后代选择器,获取ul下的所有li元素,包括孙子等</td></tr></tbody></table><h2 id="隐式迭代-重要" tabindex="-1">隐式迭代(重要) <a class="header-anchor" href="#隐式迭代-重要" aria-label="Permalink to &quot;隐式迭代(重要)&quot;">​</a></h2><p>遍历内部DOM元素(伪数组形式存储)的过程就叫做隐式迭代</p><h2 id="jquery筛选选择器" tabindex="-1">jQuery筛选选择器 <a class="header-anchor" href="#jquery筛选选择器" aria-label="Permalink to &quot;jQuery筛选选择器&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">语法</th><th style="text-align:center;">用法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">:first</td><td style="text-align:center;">$(&#39;li:first&#39;)</td><td style="text-align:center;">获取第一个li元素</td></tr><tr><td style="text-align:center;">:last</td><td style="text-align:center;">$(&#39;li:last&#39;)</td><td style="text-align:center;">获取最后一个li元素</td></tr><tr><td style="text-align:center;">:eq(index)</td><td style="text-align:center;">$(&#39;li:eq(2)&#39;)</td><td style="text-align:center;">获取到的li元素中,选择索引号为2的元素,索引号index从0开始</td></tr><tr><td style="text-align:center;">:odd</td><td style="text-align:center;">$(&#39;li:odd&#39;)</td><td style="text-align:center;">获取到的li元素中,选择索引号为奇数的元素</td></tr><tr><td style="text-align:center;">:even</td><td style="text-align:center;">$(&#39;li:even&#39;)</td><td style="text-align:center;">获取到的li元素中,选择索引号为偶数的元素</td></tr></tbody></table><h2 id="jquery筛选方法-重点" tabindex="-1">jQuery筛选方法(重点) <a class="header-anchor" href="#jquery筛选方法-重点" aria-label="Permalink to &quot;jQuery筛选方法(重点)&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">语法</th><th style="text-align:center;">用法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">parents()</td><td style="text-align:center;">$(&#39;li&#39;).parents()/$(&#39;li&#39;).parent(&#39;.class&#39;);;</td><td style="text-align:center;">查找所有父级，当前节点所有父节点</td></tr><tr><td style="text-align:center;">parent()</td><td style="text-align:center;">$(&#39;li&#39;).parent();</td><td style="text-align:center;">查找父级，当前节点的直接父节点</td></tr><tr><td style="text-align:center;">children(selector)</td><td style="text-align:center;">$(&#39;ul&#39;).children(&#39;li&#39;)</td><td style="text-align:center;">相当于$(&#39;ul&gt;li&#39;),最近一级(亲儿子)</td></tr><tr><td style="text-align:center;">find(selector)</td><td style="text-align:center;">$(&#39;ul&#39;).find(&#39;li&#39;)</td><td style="text-align:center;">相当于$(&#39;ul li&#39;),后代选择器</td></tr><tr><td style="text-align:center;">siblings(selector)</td><td style="text-align:center;">$(&#39;.first&#39;).siblings(&#39;li&#39;)</td><td style="text-align:center;">查找兄弟节点,不包括自己本身</td></tr><tr><td style="text-align:center;">nextAll([expr])</td><td style="text-align:center;">$(&#39;.fisrt&#39;).nextAll()</td><td style="text-align:center;">查找当前元素之后所有的同辈元素</td></tr><tr><td style="text-align:center;">prevtAll([expr])</td><td style="text-align:center;">$(&#39;.last&#39;).prevAll()</td><td style="text-align:center;">查找当前元素之前所有的同辈元素</td></tr><tr><td style="text-align:center;">hasClass(class)</td><td style="text-align:center;">$(&#39;div&#39;).hasClass(&#39;protected&#39;)</td><td style="text-align:center;">检查当前元素是否含有某个特定的类,如果又,则返回true</td></tr><tr><td style="text-align:center;">eq(index)</td><td style="text-align:center;">$(&#39;li&#39;).eq(2)</td><td style="text-align:center;">相当于$(&#39;li:eq(2)&#39;),索引从0开始</td></tr></tbody></table><h2 id="链式编程" tabindex="-1">链式编程 <a class="header-anchor" href="#链式编程" aria-label="Permalink to &quot;链式编程&quot;">​</a></h2><p>链式编程时为了节省代码量,看起来更优雅</p><blockquote><p>$(this).css(&#39;color&#39;,&#39;red&#39;).sibling().css(&#39;color&#39;,&#39;&#39;)</p></blockquote>',15),i=[d];function s(c,y,o,x,h,g){return e(),l("div",null,i)}const b=t(n,[["render",s]]);export{p as __pageData,b as default};
