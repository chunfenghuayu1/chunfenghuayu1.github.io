import{_ as s,o as a,c as n,V as l}from"./chunks/framework.7cbf217e.js";const t="/assets/image-20220412111912207.33735dcb.png",e="/assets/image-20220412121320181.53cf358e.png",g=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/JavaScript/01-JavaScript基础/05-数据类型.md","filePath":"front-end/JavaScript/01-JavaScript基础/05-数据类型.md","lastUpdated":1683117492000}'),o={name:"front-end/JavaScript/01-JavaScript基础/05-数据类型.md"},p=l(`<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><h2 id="变量的数据类型" tabindex="-1">变量的数据类型 <a class="header-anchor" href="#变量的数据类型" aria-label="Permalink to &quot;变量的数据类型&quot;">​</a></h2><p>变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的 内存中。<strong>JavaScript是一种弱类型或者说动态语言</strong>。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p><p>在代码运行时，变量的数据类型是由 JS引擎 根据 <strong>= 右边变量值的数据类型来判断</strong>的，运行完毕之后，变量就确定了数据类型。 <strong>JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型</strong>：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//x为数字</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bill</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//x为字符串</span></span></code></pre></div><h2 id="数据类型分类" tabindex="-1">数据类型分类 <a class="header-anchor" href="#数据类型分类" aria-label="Permalink to &quot;数据类型分类&quot;">​</a></h2><h3 id="简单数据类型" tabindex="-1">简单数据类型 <a class="header-anchor" href="#简单数据类型" aria-label="Permalink to &quot;简单数据类型&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">简单数据类型</th><th style="text-align:center;">说明</th><th style="text-align:center;">默认值</th></tr></thead><tbody><tr><td style="text-align:center;">number</td><td style="text-align:center;">数字型，包含整型值和浮点型值，如21、0.21</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:center;">布尔值类型，如true、false，等价于1和0</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">字符串类型，如”张三“注意js里面，字符串都带引号</td><td style="text-align:center;">“”</td></tr><tr><td style="text-align:center;">undefined</td><td style="text-align:center;">var a，声明变量a但没有给值，此时a=undefined</td><td style="text-align:center;">undefined</td></tr><tr><td style="text-align:center;">null</td><td style="text-align:center;">var a = null；声明了变量a为空值</td><td style="text-align:center;">null</td></tr></tbody></table><h4 id="_1-数字型number" tabindex="-1">1.数字型number <a class="header-anchor" href="#_1-数字型number" aria-label="Permalink to &quot;1.数字型number&quot;">​</a></h4><p>JavaScript 数字类型既可以用来保存整数值，也可以保存小数(浮点数）。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">21</span><span style="color:#A6ACCD;">； </span><span style="color:#676E95;font-style:italic;">//整数</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> Age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">21.37447</span><span style="color:#A6ACCD;">； </span><span style="color:#676E95;font-style:italic;">//小数</span></span></code></pre></div><p>数字型进制</p><p>二进制、八进制、十进制、十六进制</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1.八进制数字序列范围：0~7</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">07</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 对应十进制的7</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">019</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 对应十进制的19</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">08</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 对应十进制的8</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 2.十六进制数字序列范围：0~9以及A~F</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0xA</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><strong>在JS中八进制前面加0，十六进制前面加 0x</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">数字型number的最大值</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MAX_VALUE)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1.7976931348623157e+308</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MIN_VALUE)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 5e-324</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">数字型三个特殊值</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">Infinity</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Infinity， 代表无穷大，大于任何数值</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-Infinity</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// -Infinity， 代表无穷小，小于任何数值</span></span>
<span class="line"><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// NaN， not a number，代表一个非数值</span></span></code></pre></div><p>isNaN（）</p><p>判断一个变量是否为非数字的类型，返回true或false</p><p><img src="`+t+`" alt="image-20220412111912207"></p><h4 id="_2-字符串型string" tabindex="-1">2.字符串型string <a class="header-anchor" href="#_2-字符串型string" aria-label="Permalink to &quot;2.字符串型string&quot;">​</a></h4><p>字符串型可以是引号中的任意文本，其语法为双引号“”和单引号‘’</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> strMsg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">我爱北京天安门~</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 使用双引号表示字符串</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> strMsg2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我爱吃猪蹄~</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 使用单引号表示字符串</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 常见错误</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> strMsg3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 我爱大肘子</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 报错，没使用引号，会被认为是js代码，但js没有这些语法</span></span></code></pre></div><p><strong>字符串转义符</strong></p><table><thead><tr><th style="text-align:center;">符号</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">\\n</td><td style="text-align:center;">换行符，n 是 newline 的意</td></tr><tr><td style="text-align:center;">\\ \\</td><td style="text-align:center;">\\ \\</td></tr><tr><td style="text-align:center;">\\&#39;</td><td style="text-align:center;">&#39; 单引号</td></tr><tr><td style="text-align:center;">\\“</td><td style="text-align:center;">”双引</td></tr><tr><td style="text-align:center;">\\t</td><td style="text-align:center;">tab 缩进</td></tr><tr><td style="text-align:center;">\\b</td><td style="text-align:center;">空格 ，b 是 blank 的意</td></tr></tbody></table><p><strong>字符串长度</strong></p><p>字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的==length==属性可以获取整个字符串的长度。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        var str = &#39;my name is andy&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">        console.log(str.length);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><strong>字符串拼接</strong></p><p>多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串</p><p>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</p><h4 id="_3-布尔型boolean" tabindex="-1">3.布尔型boolean <a class="header-anchor" href="#_3-布尔型boolean" aria-label="Permalink to &quot;3.布尔型boolean&quot;">​</a></h4><p>布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</p><p>布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0</p><h4 id="_4-undefined" tabindex="-1">4.undefined <a class="header-anchor" href="#_4-undefined" aria-label="Permalink to &quot;4.undefined&quot;">​</a></h4><p>一个声明后没有被赋值的变量会有一个默认值 undefined ( 如果进行相连或者相加时，注意结果）</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> variable</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(variable)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">你好</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> variable)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 你好undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> variable)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// NaN</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> variable)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// NaN</span></span></code></pre></div><h4 id="_5-null" tabindex="-1">5.null <a class="header-anchor" href="#_5-null" aria-label="Permalink to &quot;5.null&quot;">​</a></h4><p>一个声明变量给 null 值，里面存的值为空（学习对象时，我们继续研究null)</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> vari </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">你好</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> vari)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 你好null</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> vari)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 11</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> vari)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span></code></pre></div><h2 id="获取变量的数据类型" tabindex="-1">获取变量的数据类型 <a class="header-anchor" href="#获取变量的数据类型" aria-label="Permalink to &quot;获取变量的数据类型&quot;">​</a></h2><h3 id="获取检测变量的数据类型" tabindex="-1">获取检测变量的数据类型 <a class="header-anchor" href="#获取检测变量的数据类型" aria-label="Permalink to &quot;获取检测变量的数据类型&quot;">​</a></h3><p>typeof 可用来获取检测变量的数据类型</p><p>不同类型的返回值</p><p><img src="`+e+`" alt="image-20220412121320181"></p><h3 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-label="Permalink to &quot;数据类型转换&quot;">​</a></h3><p>使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把一种数据类型的变量转换成另外一种数据类型。</p><p>1、转换为字符串类型</p><table><thead><tr><th style="text-align:center;">方式</th><th style="text-align:center;">说明</th><th style="text-align:center;">案例</th></tr></thead><tbody><tr><td style="text-align:center;">tostring（）</td><td style="text-align:center;">转成字符串</td><td style="text-align:center;">var num = 1；alert（num.tostring（））；</td></tr><tr><td style="text-align:center;">string（）强制转换</td><td style="text-align:center;">转成字符串</td><td style="text-align:center;">var num = 1；alert（string（num））；</td></tr><tr><td style="text-align:center;">加号拼接字符串</td><td style="text-align:center;">和字符串拼接的结果都是字符串</td><td style="text-align:center;">var num = 1；alert（num+”我是字符串“）；</td></tr></tbody></table><p>2、转换为数字型</p><table><thead><tr><th style="text-align:center;">方式</th><th style="text-align:center;">说明</th><th style="text-align:center;">案例</th></tr></thead><tbody><tr><td style="text-align:center;">parseInt（string）函数</td><td style="text-align:center;">将string类型转成整数数值型</td><td style="text-align:center;">parseint（’78‘）</td></tr><tr><td style="text-align:center;">parseFloat（string）函数</td><td style="text-align:center;">将string类型转成浮点数数值型</td><td style="text-align:center;">parsefloat（’78.21‘）</td></tr><tr><td style="text-align:center;">Number（）强制转换函数</td><td style="text-align:center;">将string类型转换成数值型</td><td style="text-align:center;">number（’12‘）</td></tr><tr><td style="text-align:center;">js隐式转换（- * /）</td><td style="text-align:center;">利用算数运算隐式转换成数值型</td><td style="text-align:center;">’12‘-0</td></tr></tbody></table><p>注意 parseInt 和 parseFloat 单词的大小写，这2个是重点</p><p>隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型</p><p>3、转换为布尔型</p><p>代表空、否定的值会被转换为 false ，如 &#39;&#39;、0、NaN、null、undefined</p><p>其余值都会被转换为 true</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">小白</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><h2 id="标识符、关键字、保留字" tabindex="-1">标识符、关键字、保留字 <a class="header-anchor" href="#标识符、关键字、保留字" aria-label="Permalink to &quot;标识符、关键字、保留字&quot;">​</a></h2><p><strong>1、标识符</strong></p><p>标识(zhi)符：就是指开发人员为变量、属性、函数、参数取的名字。</p><p><strong>标识符不能是关键字或保留字</strong></p><p><strong>2、关键字</strong></p><p>关键字：是指 JS本身已经使用了的字，不能再用它们充当变量名、方法名。</p><p>包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、 instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</p><p><strong>3、保留字</strong></p><p>保留字：实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。</p><p>包括：boolean、byte、char、class、const、debugger、double、enum、export、extends、 fimal、float、goto、implements、import、int、interface、long、mative、package、 private、protected、public、short、static、super、synchronized、throws、transient、 volatile 等。</p><blockquote><p><strong>注意</strong>：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。</p></blockquote>`,67),r=[p];function c(y,i,A,C,D,d){return a(),n("div",null,r)}const h=s(o,[["render",c]]);export{g as __pageData,h as default};
