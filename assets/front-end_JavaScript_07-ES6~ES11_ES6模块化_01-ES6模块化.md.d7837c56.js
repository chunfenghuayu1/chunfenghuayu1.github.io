import{_ as a,o as s,c as l,V as n}from"./chunks/framework.7cbf217e.js";const o="/assets/image-20220518232154869.dff55f06.png",e="/assets/image-20220518233123466.cd40d198.png",p="/assets/image-20220518233408346.369da040.png",t="/assets/image-20220518233714501.a1d0d4b7.png",u=JSON.parse('{"title":"ES6模块化","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/JavaScript/07-ES6~ES11/ES6模块化/01-ES6模块化.md","filePath":"front-end/JavaScript/07-ES6~ES11/ES6模块化/01-ES6模块化.md","lastUpdated":1683117492000}'),r={name:"front-end/JavaScript/07-ES6~ES11/ES6模块化/01-ES6模块化.md"},c=n(`<h1 id="es6模块化" tabindex="-1">ES6模块化 <a class="header-anchor" href="#es6模块化" aria-label="Permalink to &quot;ES6模块化&quot;">​</a></h1><h2 id="_1-回顾-node-js中如何实现模块化" tabindex="-1">1. 回顾：node.js中如何实现模块化 <a class="header-anchor" href="#_1-回顾-node-js中如何实现模块化" aria-label="Permalink to &quot;1. 回顾：node.js中如何实现模块化&quot;">​</a></h2><p>node.js 遵循了 CommonJS 的模块化规范。其中：</p><ul><li>导入其它模块使用 <strong>require()</strong> 方法</li><li>模块对外共享成员使用 <strong>module.exports</strong> 对象</li></ul><p>模块化的好处：</p><p>大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己。</p><h2 id="_2-前端模块化规范的分类" tabindex="-1">2. 前端模块化规范的分类 <a class="header-anchor" href="#_2-前端模块化规范的分类" aria-label="Permalink to &quot;2. 前端模块化规范的分类&quot;">​</a></h2><p>在 ES6 模块化规范诞生之前，JavaScript 社区已经尝试并提出了 AMD、CMD、CommonJS 等模块化规范。</p><p>但是，这些由社区提出的模块化标准，还是存在一定的差异性与局限性、并不是浏览器与服务器通用的模块化 标准，例如：</p><ul><li>AMD 和 CMD 适用于浏览器端的 Javascript 模块化</li><li>CommonJS 适用于服务器端的 Javascript 模块化</li></ul><p>太多的模块化规范给开发者增加了学习的难度与开发的成本。因此，大一统的 ES6 模块化规范诞生了！</p><h2 id="_3-什么是-es6-模块化规范" tabindex="-1">3. 什么是 ES6 模块化规范 <a class="header-anchor" href="#_3-什么是-es6-模块化规范" aria-label="Permalink to &quot;3. 什么是 ES6 模块化规范&quot;">​</a></h2><p>ES6 模块化规范是浏览器端与服务器端通用的模块化开发规范。它的出现极大的降低了前端开发者的模块化学 习成本，开发者不需再额外学习 AMD、CMD 或 CommonJS 等模块化规范。</p><p>ES6 模块化规范中定义：</p><ul><li>每个 js 文件都是一个独立的模块</li><li>导入其它模块成员使用 import 关键字</li><li>向外共享模块成员使用 export 关键字</li></ul><h2 id="_4-在nodejs中体验es6模块化" tabindex="-1">4. 在nodejs中体验ES6模块化 <a class="header-anchor" href="#_4-在nodejs中体验es6模块化" aria-label="Permalink to &quot;4. 在nodejs中体验ES6模块化&quot;">​</a></h2><p>node.js 中默认仅支持 CommonJS 模块化规范，若想基于 node.js 体验与学习 ES6 的模块化语法，可以按照 如下两个步骤进行配置：</p><p>确保安装了 v14.15.1 或更高版本的 node.js</p><p>在 package.json 的根节点中添加 ==&quot;type&quot;: &quot;module&quot;== 节点</p><h2 id="_5-es6-模块化的基本语法" tabindex="-1">5. ES6 模块化的基本语法 <a class="header-anchor" href="#_5-es6-模块化的基本语法" aria-label="Permalink to &quot;5. ES6 模块化的基本语法&quot;">​</a></h2><p>ES6 的模块化主要包含如下 3 种用法：</p><ol><li>默认导出与默认导入</li><li>按需导出与按需导入</li><li>直接导入并执行模块中的代码</li></ol><h3 id="默认导出" tabindex="-1">默认导出 <a class="header-anchor" href="#默认导出" aria-label="Permalink to &quot;默认导出&quot;">​</a></h3><p>默认导出的语法： ==export default== 默认导出的成员</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> n1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> n2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">show</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  n1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  show</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="默认导入" tabindex="-1">默认导入 <a class="header-anchor" href="#默认导入" aria-label="Permalink to &quot;默认导入&quot;">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> m1 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./01默认导出.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(m1)</span></span></code></pre></div><h4 id="默认导出的注意事项" tabindex="-1">默认导出的<em>注意事项❗</em> <a class="header-anchor" href="#默认导出的注意事项" aria-label="Permalink to &quot;默认导出的*注意事项:exclamation:*&quot;">​</a></h4><p>每个模块中，只允许使用唯一的一次 export default，否则会报错！</p><h4 id="默认导入的注意事项" tabindex="-1">默认导入的<em>注意事项❗</em> <a class="header-anchor" href="#默认导入的注意事项" aria-label="Permalink to &quot;默认导入的*注意事项:exclamation:*&quot;">​</a></h4><p>默认导入时的接收名称可以任意名称，只要是合法的成员名称即可：</p><p><img src="`+o+`" alt="image-20220518232154869"></p><h3 id="按需导出" tabindex="-1">按需导出 <a class="header-anchor" href="#按需导出" aria-label="Permalink to &quot;按需导出&quot;">​</a></h3><p>按需导出的语法： export 按需导出的成员</p><h3 id="按需导入" tabindex="-1">按需导入 <a class="header-anchor" href="#按需导入" aria-label="Permalink to &quot;按需导入&quot;">​</a></h3><p>按需导入的语法： import { s1 } from &#39;模块标识符&#39;</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">s1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">s2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">say</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./03按需导出.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(s1)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(s2)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(say)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="按需导入-导出的注意事项" tabindex="-1">按需导入/导出的<em>注意事项❗</em> <a class="header-anchor" href="#按需导入-导出的注意事项" aria-label="Permalink to &quot;按需导入/导出的*注意事项:exclamation:*&quot;">​</a></h4><ol><li><p>每个模块中可以使用多次按需导出</p></li><li><p>按需导入的成员名称必须和按需导出的名称保持一致</p></li><li><p>按需导入时，可以使用 as 关键字进行重命名</p><p><img src="`+e+'" alt="image-20220518233123466"></p></li><li><p>按需导入可以和默认导入一起使用</p></li></ol><p><img src="'+p+'" alt="image-20220518233408346"></p><h3 id="直接导入并执行模块中的代码" tabindex="-1">直接导入并执行模块中的代码 <a class="header-anchor" href="#直接导入并执行模块中的代码" aria-label="Permalink to &quot;直接导入并执行模块中的代码&quot;">​</a></h3><p>如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员。</p><p>此时，可以直接导入并执行模块代码，示例代码如下：</p><p><img src="'+t+'" alt="image-20220518233714501"></p>',44),i=[c];function d(D,h,y,C,m,A){return s(),l("div",null,i)}const _=a(r,[["render",d]]);export{u as __pageData,_ as default};
